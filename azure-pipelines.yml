#Terraform Azure
trigger: 
- none

pool:
  name: 'cicd'
steps:
- task: TerraformInstaller@1
  displayName: tf tool
  inputs:
    terraformVersion: 'latest'
- task: TerraformTaskV4@4
  displayName: tf init
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/VM'
    backendServiceArm: 'Visual Studio Enterprise Subscription (e742faf7-99c3-46f9-9939-22d3f0e74d44)'
    backendAzureRmResourceGroupName: 'backend-tf'
    backendAzureRmStorageAccountName: 'ajinkyatfbackendstorage'
    backendAzureRmContainerName: 'terraform-state'
    backendAzureRmKey: 'terraform.tfstate'
- task: TerraformTaskV4@4
  displayName: tf validate
  inputs:
    provider: 'azurerm'
    command: 'validate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/VM'
- task: TerraformTaskV4@4
  displayName: tf format
  inputs:
    provider: 'azurerm'
    command: 'custom'
    workingDirectory: '$(System.DefaultWorkingDirectory)/VM'
    outputTo: 'console'
    customCommand: 'fmt'
    environmentServiceNameAzureRM: 'Visual Studio Enterprise Subscription (e742faf7-99c3-46f9-9939-22d3f0e74d44)'

- task: TerraformTaskV4@4
  displayName: tf plan
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/VM'
    commandOptions: '--out=tf.plan'
    environmentServiceNameAzureRM: 'Visual Studio Enterprise Subscription (e742faf7-99c3-46f9-9939-22d3f0e74d44)'
- task: ArchiveFiles@2
  displayName: Archive files
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/VM'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  displayName: Publish Artifacts
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: '$(Build.Buildid)-build'
    publishLocation: 'Container'
    